# Default values for jira.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

global:
  image:
    registry: ""
    tag: 2.27.1.0
    pullPolicy: IfNotPresent
  securityContext: {}
  extraEnv: []

services:
  admin:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-admin-server
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    env: []
    resources: {}
    ingress: {}
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}

  config:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-config
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env:
    - name: SPRING_PROFILES_ACTIVE
      value: git
    - name: CONFIG_GIT_BASEDIR
      value: /tmp/git_config
    - name: CONFIG_NATIVE_PATH
      value: /tmp/config
    - name: XDG_CONFIG_HOME
      value: /tmp
    ingress: {}
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}

  discovery:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-discovery
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env: []
    ingress: {}
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}

  gateway:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-gateway
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env:
    - name: GEOSERVER_BASE_PATH
      value: /geoserver
    ingress: {}
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}

  gwc:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-gwc
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env:
    - name: GEOSERVER_DATA_DIR
      value: "/opt/app/data_directory"
    - name: GEOWEBCACHE_CACHE_DIR
      value: "/data/geowebcache"
    - name: SPRING_PROFILES_ACTIVE
      value: "datadir"
    ingress: {}
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}

  rest:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-discovery
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env: []
    ingress: {}
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}

  wcs:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-wcs
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env:
    - name: GEOSERVER_DATA_DIR
      value: "/opt/app/data_directory"
    - name: SPRING_PROFILES_ACTIVE
      value: "datadir"
    ingress: {}
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}

  webui:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-webui
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env:
    - name: GEOSERVER_DATA_DIR
      value: "/opt/app/data_directory"
    - name: GEOWEBCACHE_CACHE_DIR
      value: "/data/geowebcache"
    - name: SPRING_PROFILES_ACTIVE
      value: "datadir"
    ingress: {}
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}

  wfs:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-wfs
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env:
    - name: GEOSERVER_DATA_DIR
      value: "/opt/app/data_directory"
    - name: SPRING_PROFILES_ACTIVE
      value: "datadir"
    ingress: {}
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}

  wms:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-wms
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env:
    - name: GEOSERVER_DATA_DIR
      value: "/opt/app/data_directory"
    - name: GEOWEBCACHE_CACHE_DIR
      value: "/data/geowebcache"
    - name: SPRING_PROFILES_ACTIVE
      value: "datadir"
    ingress: {}
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}

  rabbitmq:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: rabbitmq
      tag: 3.13.3-alpine
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env: []
    ingress: {}
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    volumes: []
    volumeMounts: []
    securityContext: {}

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {} # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
  - host: chart-example.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

pvc:
  accessModes:
  - ReadWriteOnce
  storage: 10Gi
  storageClass: "hostpath"
  local: {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
