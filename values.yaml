global:
  image:
    registry: ""
    tag: 2.27.1.0
    pullPolicy: IfNotPresent
  securityContext: {}
  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}
  extraEnv: []

services:
  acl:
    enabled: false
    image:
      registry: ""
      image: geoservercloud/geoserver-acl
      tag: 2.3.1
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
    env:
    - name: ACL_USERS_ADMIN_PASSWORD
      value: "s3cr3t"
    - name: ACL_USERS_GEOSERVER_PASSWORD
      value: "s3cr3t"
    - name: GEOSERVER_BUS_ENABLED
      value: "true"
    # - name: PG_HOST
    #   value: pgconfigdb
    # - name: PG_PORT
    #   value: 5432
    # - name: PG_DB
    #   value: pgconfig
    # - name: PG_SCHEMA
    #   value: acl
    # - name: PG_USERNAME
    #   value: pgconfig
    # - name: PG_PASSWORD
    #   value: pgconfig
    resources: {}
    livenessProbe: {}
    readinessProbe: {}
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}
    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []
    affinity: {}

  admin:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-admin-server
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8080
    env: []
    resources: {}
    livenessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 30
      periodSeconds: 10
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}
    imagePullSecrets: []

  config:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-config
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    git:
      protocol: http # или "ssh"
      uri: https://github.com/geoserver/geoserver-cloud-config.git
      branch: master
      ssh:
        privateKey: ""
        privateKeySecret:
          name: ""
          key: id_rsa
        knownHosts: ""
        knownHostsSecret:
          name: ""
          key: known_hosts
      http:
        username: ""
        password: ""
        passwordSecret:
          name: ""
          key: password
    env: []
    livenessProbe: {}
    readinessProbe: {}
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}
    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []
    affinity: {}

  discovery:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-discovery
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8761
      healthPort: 8081
    resources: {}
    env: []
    livenessProbe: {}
    readinessProbe: {}
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}
    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []
    affinity: {}

  gateway:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-gateway
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env:
    - name: GEOSERVER_BASE_PATH
      value: /geoserver
    readinessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 50
    livenessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 50
    volumes: []
    volumeMounts: []
    securityContext: {}
    hpa: {}
    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []
    affinity: {}

  gwc:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-gwc
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env:
    - name: GEOSERVER_DATA_DIR
      value: "/opt/app/data_directory"
    - name: GEOWEBCACHE_CACHE_DIR
      value: "/data/geowebcache"
    - name: SPRING_PROFILES_ACTIVE
      value: "datadir"
    readinessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 50
    livenessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 50
    volumes:
    - name: shared-data
      type: pvc
      claimRef: shared-data
    - name: geowebcache-data
      type: pvc
      claimRef: geowebcache-data
    volumeMounts:
    - name: shared-data
      mountPath: /opt/app/data_directory
    - name: geowebcache-data
      mountPath: /data/geowebcache
    securityContext: {}
    hpa: {}
    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []
    affinity: {}

  rest:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-discovery
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env: []
    readinessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 50
    livenessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 50
    volumes:
    - name: shared-data
      type: pvc
      claimRef: shared-data
    volumeMounts:
    - name: shared-data
      mountPath: /opt/app/data_directory
    securityContext: {}
    hpa: {}
    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []
    affinity: {}

  wcs:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-wcs
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env:
    - name: GEOSERVER_DATA_DIR
      value: "/opt/app/data_directory"
    - name: SPRING_PROFILES_ACTIVE
      value: "datadir"
    readinessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 50
    livenessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 50
    volumes:
    - name: shared-data
      type: pvc
      claimRef: shared-data
    volumeMounts:
    - name: shared-data
      mountPath: /opt/app/data_directory
    securityContext: {}
    hpa: {}
    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []
    affinity: {}

  webui:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-webui
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env:
    - name: GEOSERVER_DATA_DIR
      value: "/opt/app/data_directory"
    - name: GEOWEBCACHE_CACHE_DIR
      value: "/data/geowebcache"
    - name: SPRING_PROFILES_ACTIVE
      value: "datadir"
    - name: ACL_URL
      value: http://acl:8080/acl/api
    - name: ACL_USERNAME
      value: admin
    - name: ACL_PASSWORD
      value: s3cr3t
    readinessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 50
    livenessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 50
    volumes:
    - name: shared-data
      type: pvc
      claimRef: shared-data
    - name: geowebcache-data
      type: pvc
      claimRef: geowebcache-data
    volumeMounts:
    - name: shared-data
      mountPath: /opt/app/data_directory
    - name: geowebcache-data
      mountPath: /data/geowebcache
    securityContext: {}
    hpa: {}
    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []
    affinity: {}

  wfs:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-wfs
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env:
    - name: GEOSERVER_DATA_DIR
      value: "/opt/app/data_directory"
    - name: SPRING_PROFILES_ACTIVE
      value: "datadir"
    readinessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 50
    livenessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 50
    volumes:
    - name: shared-data
      type: pvc
      claimRef: shared-data
    volumeMounts:
    - name: shared-data
      mountPath: /opt/app/data_directory
    securityContext: {}
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80
    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []
    affinity: {}

  wms:
    enabled: true
    replicaCount: 1
    image:
      registry: ""
      image: geoservercloud/geoserver-cloud-wms
      tag: 2.27.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      containerPort: 8080
      healthPort: 8081
    resources: {}
    env:
    - name: GEOSERVER_DATA_DIR
      value: "/opt/app/data_directory"
    - name: GEOWEBCACHE_CACHE_DIR
      value: "/data/geowebcache"
    - name: SPRING_PROFILES_ACTIVE
      value: "datadir"
    readinessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 50
    livenessProbe:
      httpGet:
        path: /actuator/health
      initialDelaySeconds: 50
    volumes:
    - name: shared-data
      type: pvc
      claimRef: shared-data
    - name: geowebcache-data
      type: pvc
      claimRef: geowebcache-data
    volumeMounts:
    - name: shared-data
      mountPath: /opt/app/data_directory
    - name: geowebcache-data
      mountPath: /data/geowebcache
    securityContext: {}
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 75
      - type: Resource
        resource:
          name: memory
          target:
            type: Utilization
            averageUtilization: 65
    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []
    affinity: {}

# Values for chart bitnami/rabbitmq
rabbitmq:
  replicaCount: 1
  auth:
    username: user
    password: bitnami
    erlangCookie: secretcookie
  persistence:
    enabled: false
    storageClass: "standard"
    size: 8Gi
  service:
    type: ClusterIP
  metrics:
    enabled: false

ingress:
  enabled: false
  ingressClassName: "nginx"
  labels: {}
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
  - host: geoserver.yourdomain.com
    paths:
    - path: /
      pathType: Prefix
  tls:
  - hosts:
    - geoserver.yourdomain.com
    secretName: geo-tls

persistentVolumeClaims:
  shared-data:
    create: true
    claimName: shared-data
    storageClassName: standard
    accessModes:
    - ReadWriteMany
    size: 5Gi
  geowebcache-data:
    create: true
    claimName: geowebcache-data
    storageClassName: standard
    accessModes:
    - ReadWriteMany
    size: 5Gi
